// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package gcmjson

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson573c7f47DecodeGithubComKmansoftGcmjson(in *jlexer.Lexer, out *GcmResponse) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = int(in.Int())
		case "failure":
			out.Failure = int(in.Int())
		case "canonical_ids":
			out.CanonicalIds = int(in.Int())
		case "results":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Results = make([]GcmResultItem, 0, 1)
			} else {
				out.Results = nil
			}
			for !in.IsDelim(']') {
				var v1 GcmResultItem
				(v1).UnmarshalEasyJSON(in)
				out.Results = append(out.Results, v1)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson(out *jwriter.Writer, in GcmResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"success\":")
	out.Int(int(in.Success))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"failure\":")
	out.Int(int(in.Failure))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"canonical_ids\":")
	out.Int(int(in.CanonicalIds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"results\":")
	out.RawByte('[')
	for v2, v3 := range in.Results {
		if v2 > 0 {
			out.RawByte(',')
		}
		(v3).MarshalEasyJSON(out)
	}
	out.RawByte(']')
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson(l, v)
}
func easyjson573c7f47DecodeGithubComKmansoftGcmjson1(in *jlexer.Lexer, out *GcmResultItem) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "message_id":
			out.MessageId = string(in.String())
		case "registration_id":
			out.RegistrationId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson1(out *jwriter.Writer, in GcmResultItem) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"error\":")
	out.String(string(in.Error))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_id\":")
	out.String(string(in.MessageId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"registration_id\":")
	out.String(string(in.RegistrationId))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmResultItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmResultItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmResultItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmResultItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson1(l, v)
}
func easyjson573c7f47DecodeGithubComKmansoftGcmjson2(in *jlexer.Lexer, out *GcmPacket) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "collapse_key":
			out.CollapseKey = string(in.String())
		case "priority":
			out.Priority = string(in.String())
		case "restricted_package_name":
			out.RestrictedPackage = string(in.String())
		case "data":
			out.Data = in.Interface()
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson2(out *jwriter.Writer, in GcmPacket) {
	out.RawByte('{')
	first := true
	_ = first
	if in.To != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"to\":")
		out.String(string(in.To))
	}
	if in.CollapseKey != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"collapse_key\":")
		out.String(string(in.CollapseKey))
	}
	if in.Priority != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"priority\":")
		out.String(string(in.Priority))
	}
	if in.RestrictedPackage != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"restricted_package_name\":")
		out.String(string(in.RestrictedPackage))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.Raw(json.Marshal(in.Data))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmPacket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmPacket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmPacket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmPacket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson2(l, v)
}
func easyjson573c7f47DecodeGithubComKmansoftGcmjson3(in *jlexer.Lexer, out *GcmDataNoSubList) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson3(out *jwriter.Writer, in GcmDataNoSubList) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmDataNoSubList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmDataNoSubList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmDataNoSubList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmDataNoSubList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson3(l, v)
}
func easyjson573c7f47DecodeGithubComKmansoftGcmjson4(in *jlexer.Lexer, out *GcmDataSubList) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subs":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.SubList = make([]GcmDataSubItem, 0, 2)
			} else {
				out.SubList = nil
			}
			for !in.IsDelim(']') {
				var v4 GcmDataSubItem
				(v4).UnmarshalEasyJSON(in)
				out.SubList = append(out.SubList, v4)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson4(out *jwriter.Writer, in GcmDataSubList) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subs\":")
	out.RawByte('[')
	for v5, v6 := range in.SubList {
		if v5 > 0 {
			out.RawByte(',')
		}
		(v6).MarshalEasyJSON(out)
	}
	out.RawByte(']')
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmDataSubList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmDataSubList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmDataSubList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmDataSubList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson4(l, v)
}
func easyjson573c7f47DecodeGithubComKmansoftGcmjson5(in *jlexer.Lexer, out *GcmDataSubItem) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sub_id":
			out.SubId = string(in.String())
		case "ts":
			out.ChangeTs = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson573c7f47EncodeGithubComKmansoftGcmjson5(out *jwriter.Writer, in GcmDataSubItem) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sub_id\":")
	out.String(string(in.SubId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ts\":")
	out.Int64(int64(in.ChangeTs))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GcmDataSubItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson573c7f47EncodeGithubComKmansoftGcmjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GcmDataSubItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson573c7f47EncodeGithubComKmansoftGcmjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GcmDataSubItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson573c7f47DecodeGithubComKmansoftGcmjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GcmDataSubItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson573c7f47DecodeGithubComKmansoftGcmjson5(l, v)
}
